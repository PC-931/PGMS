// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      Role     @default(TENANT)
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  phone     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations - Many-to-many with Room
  rooms               Room[]               @relation("RoomTenants")
  rents               Rent[]
  payments           Payment[]
  maintenanceRequests MaintenanceRequest[]

  @@map("users")
}

model Room {
  id        String     @id @default(uuid())
  number    String     @unique
  type      String     // SINGLE, DOUBLE, TRIPLE, FOUR
  rent      Decimal    @db.Decimal(10, 2)
  deposit   Decimal    @db.Decimal(10, 2)
  status    RoomStatus @default(AVAILABLE)
  floor     Int
  amenities String[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  // Relations - Many-to-many with User
  tenants             User[]               @relation("RoomTenants")
  rents               Rent[]
  payments           Payment[]
  maintenanceRequests MaintenanceRequest[]

  @@map("rooms")
}

model Rent {
  id           String     @id @default(uuid())
  tenantId     String     @map("tenant_id")
  roomId       String     @map("room_id")
  amount       Decimal    @db.Decimal(10, 2)
  periodStart  DateTime   @map("period_start")
  periodEnd    DateTime   @map("period_end")
  dueDate      DateTime   @map("due_date")
  status       RentStatus @default(PENDING)
  paidAmount   Decimal    @default(0) @map("paid_amount") @db.Decimal(10, 2)
  notes        String?
  createdBy    String?    @map("created_by")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  isDeleted    Boolean    @default(false) @map("is_deleted")

  // Relations
  tenant       User            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  room         Room            @relation(fields: [roomId], references: [id], onDelete: Cascade)
  rentPayments RentPayment[]

  @@index([tenantId])
  @@index([roomId])
  @@index([dueDate])
  @@index([status])
  @@map("rents")
}

model RentPayment {
  id          String   @id @default(uuid())
  rentId      String   @map("rent_id")
  amount      Decimal  @db.Decimal(10, 2)
  paidAt      DateTime @map("paid_at")
  method      String
  reference   String?
  notes       String?
  createdBy   String?  @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  rent        Rent     @relation(fields: [rentId], references: [id], onDelete: Cascade)

  @@index([rentId])
  @@map("rent_payments")
}

model Payment {
  id        String        @id @default(uuid())
  amount    Decimal       @db.Decimal(10, 2)
  dueDate   DateTime      @map("due_date")
  paidDate  DateTime?     @map("paid_date")
  status    PaymentStatus @default(PENDING)
  type      PaymentType
  tenantId  String        @map("tenant_id")
  roomId    String        @map("room_id")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  // Relations
  tenant User @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model MaintenanceRequest {
  id          String            @id @default(uuid())
  title       String
  description String
  status      MaintenanceStatus @default(PENDING)
  priority    Priority          @default(MEDIUM)
  tenantId    String            @map("tenant_id")
  roomId      String            @map("room_id")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  // Relations
  tenant User @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  room   Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("maintenance_requests")
}

enum Role {
  ADMIN
  TENANT
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum PaymentType {
  RENT
  DEPOSIT
  MAINTENANCE
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum RentStatus {
  PENDING
  PARTIAL
  PAID
  OVERDUE
}